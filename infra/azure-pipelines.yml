############
# pipeline
name: $(TeamProject)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger:
- master
variables:
  # NOTE: aksServicePrincipalAppId, aksServicePrincipalClientSecret & aksServicePrincipalObjectId are stored as pipeline variables, via the AzDo GUI.
  location: 'australiaeast'
  azureServiceEndpointCxn: 'Azure CXP FTA Internal Subscription CBELLEE (b2375b5f-8dab-4436-b87c-32bc7fdce5d0)'
  project: 'goshop'
  kubernetesVersion: '1.14.6'
  poolVmImageName: 'ubuntu-latest'
  deployTestEnvironment: 'false'
  continerName: images
stages:
- stage: Build
  jobs:
  - job: GetInfraArtifacts
    displayName: Get Infrastructure Artifacts
    pool: 
      vmImage: $(poolVmImageName)
    steps:
      - task: CopyFiles@2
        inputs:
          sourceFolder: '$(Build.SourcesDirectory)'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          Contents: '**'
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: drop
- stage: DevInfrastructure
  displayName: 'Dev Infrastructure'
  jobs:
  - deployment: DevInfrastructure
    variables:
      environmentName: 'dev'
      prefix: '$(project)-$(environmentName)'
      resourceGroupName: '$(prefix)-rg'
    displayName: Deploy Dev Infrastructure
    pool:
      vmImage: $(poolVmImageName)
    environment: '$(project)-$(environmentName)'
    strategy:
        runOnce:
            deploy:
                steps:
                    - task: AzurePowerShell@4
                      displayName: 'dump env vars'
                      inputs:
                        azureSubscription: $(azureServiceEndpointCxn)
                        Inline: 'dir env:\'
                        ScriptType: InlineScript
                        azurePowerShellVersion: LatestVersion
                        FailOnStandardError: true

                    - task: AzurePowerShell@4
                      displayName: 'Detect whether Application Gateway has been installed already'
                      inputs:
                        azureSubscription: $(azureServiceEndpointCxn)
                        ScriptPath: $(Agent.BuildDirectory)/drop/deploy-ingress/Get-AppGateway.ps1
                        ScriptArguments: '-resourceGroupName $(resourceGroupName)'
                        ScriptType: FilePath
                        azurePowerShellVersion: LatestVersion
                        FailOnStandardError: true

                    - task: AzureResourceGroupDeployment@2
                      displayName: 'Deploy ARM infrastructure'
                      inputs:
                        azureSubscription: $(azureServiceEndpointCxn)
                        action: 'Create Or Update Resource Group'
                        deploymentName: 'InfraDeployment'
                        resourceGroupName: $(resourceGroupName)
                        location: $(location)
                        templateLocation: 'Linked artifact'
                        csmFile: $(Agent.BuildDirectory)/drop/templates/azuredeploy.json
                        overrideParameters: '-aksServicePrincipalAppId $(aksServicePrincipalAppId) -kubernetesVersion $(kubernetesVersion) -isDeployApplicationGateway $(isDeployApplicationGateway)'
                        csmParametersFile: $(Agent.BuildDirectory)/drop/templates/azuredeploy.parameters.json
                        deploymentMode: 'Incremental'

                    - task: ARM Outputs@5
                      displayName: 'Get ARM deployment outputs'
                      inputs:
                        ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                        ConnectedServiceNameARM: $(azureServiceEndpointCxn)
                        resourceGroupName: $(resourceGroupName)
                        whenLastDeploymentIsFailed: 'fail'
                        deploymentNameFilter: 'InfraDeployment'

                    - task: AzureCLI@1
                      displayName: 'Copy ARM template files to Azure blob storage'
                      enabled: true
                      inputs:
                        azureSubscription: $(serviceConnection)
                        scriptLocation: 'inlineScript'
                        inlineScript: 'az storage blob upload-batch -d $(containerName) -s ./images/ --pattern *.jpg --account-name $(storageAccountName)'

                    - task: PowerShell@2
                      displayName: 'Generate helm-config.yaml file'
                      inputs:
                        filePath: $(Agent.BuildDirectory)/drop/deploy-ingress/New-HelmConfigFile.ps1
                        arguments: '-subscriptionId $(subscriptionId) -resourceGroupName $(resourceGroupName) -applicationGatewayName $(applicationGatewayName) -applicationGatewayIdentityResourceId $(applicationGatewayIdentityResourceId) -applicationGatewayIdentityClientId $(applicationGatewayIdentityClientId) -aksApiServerUri $(aksApiServerUri)'
                    
                    - task: HelmInstaller@1
                      inputs:
                        helmVersionToInstall: 'latest'
                    
                    - task: AzureCLI@1
                      displayName: 'Deploy AKS Application Gateway Ingress Controller'
                      inputs:
                        azureSubscription: $(azureServiceEndpointCxn)
                        scriptLocation: 'scriptPath'
                        scriptPath: $(Agent.BuildDirectory)/drop/deploy-ingress/deploy-ingress-controller.sh
                        arguments: '-r $(resourceGroupName) -c $(aksClusterName)'
- stage: TestInfrastructure
  displayName: 'Test Infrastructure'
  jobs:
  - deployment: TestInfrastructure
    variables:
      environmentName: 'tst'
      prefix: '$(project)-$(environmentName)'
      resourceGroupName: '$(prefix)-rg'
    displayName: Deploy Test Infrastructure
    condition: and(succeeded(), eq(variables['deployTestEnvironment'], 'true'))
    pool:
      vmImage: $(poolVmImageName)
    environment: '$(project)-$(environmentName)'
    strategy:
        runOnce:
            deploy:
                steps:
                    - task: AzurePowerShell@4
                      displayName: 'Detect whether Application Gateway has been installed already'
                      inputs:
                        azureSubscription: $(azureServiceEndpointCxn)
                        ScriptPath: $(Agent.BuildDirectory)/drop/deploy-ingress/Get-AppGateway.ps1
                        ScriptArguments: '-resourceGroupName $(resourceGroupName)'
                        ScriptType: FilePath
                        azurePowerShellVersion: LatestVersion
                        FailOnStandardError: true
                    - task: AzureResourceGroupDeployment@2
                      displayName: 'Deploy ARM infrastructure'
                      inputs:
                        azureSubscription: $(azureServiceEndpointCxn)
                        action: 'Create Or Update Resource Group'
                        deploymentName: 'aksInfraDeployment'
                        resourceGroupName: $(resourceGroupName)
                        location: $(location)
                        templateLocation: 'Linked artifact'
                        csmFile: $(Agent.BuildDirectory)/drop/templates/azuredeploy.json
                        overrideParameters: '-aksServicePrincipalAppId $(aksServicePrincipalAppId) -kubernetesVersion $(kubernetesVersion) -isDeployApplicationGateway $(isDeployApplicationGateway)'
                        csmParametersFile: '$(Agent.BuildDirectory)/drop/templates/azuredeploy.parameters.json'
                        deploymentMode: 'Incremental'
                    - task: ARM Outputs@5
                      displayName: 'Get ARM deployment outputs'
                      inputs:
                        ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
                        ConnectedServiceNameARM: $(azureServiceEndpointCxn)
                        resourceGroupName: $(resourceGroupName)
                        whenLastDeploymentIsFailed: 'fail'
                        deploymentNameFilter: 'aksInfraDeployment'
                    - task: PowerShell@2
                      displayName: 'Generate helm-config.yaml file'
                      inputs:
                        filePath: $(Agent.BuildDirectory)/drop/deploy-ingress/New-HelmConfigFile.ps1
                        arguments: '-subscriptionId $(subscriptionId) -resourceGroupName $(resourceGroupName) -applicationGatewayName $(applicationGatewayName) -applicationGatewayIdentityResourceId $(applicationGatewayIdentityResourceId) -applicationGatewayIdentityClientId $(applicationGatewayIdentityClientId) -aksApiServerUri $(aksApiServerUri)'
                    - task: HelmInstaller@1
                      inputs:
                        helmVersionToInstall: 'latest'
                    - task: AzureCLI@1
                      displayName: 'Deploy AKS Application Gateway Ingress Controller'
                      inputs:
                        azureSubscription: $(azureServiceEndpointCxn)
                        scriptLocation: 'scriptPath'
                        scriptPath: $(Agent.BuildDirectory)/drop/deploy-ingress/deploy-ingress-controller.sh
                        arguments: '-r $(resourceGroupName) -c $(aksClusterName)'
